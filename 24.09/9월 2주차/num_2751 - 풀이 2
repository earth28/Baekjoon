import java.util.*;

public class num_2751 {	// 병합 정렬 사용
	/* static : 객체를 생성하지 않고 호출할 수 있는 메소드
	 * static이 없는 메소드는 인스턴스 메소드로, 해당 클래스의 인스턴스를 생성해야만 호출 가능
	 * 따라서 public void mergesort 등으로 바꿀 경우, 클래스 객체를 먼저 생성해야함
	 */
	
	public static void mergesort(int[] arr, int left, int right) {
		if (left == right) {
			return;
		}
		
		// 중간 인덱스
		int mid = (left + right) / 2;
		
		// 왼쪽, 오른쪽 정렬
		mergesort(arr, left, mid);
		mergesort(arr, mid + 1, right);
		
		// 절반씩 나뉜 부분 배열을 다시 합침과 동시에 정렬 수행
		merge(arr, left, mid, right);
	}
	
	public static void merge(int[] arr, int left, int mid, int right) {
		int n1 = mid - left + 1;	// 왼쪽 배열 길이
		int n2 = right - mid;	// 오른쪽 배열 길이
		
		// 각각 왼쪽과 오른쪽 배열을 담을 빈 배열
		int[] leftarr = new int[n1];
		int[] rightarr = new int[n2];
		
		for (int i = 0; i < n1; i++) {
			leftarr[i] = arr[left + i];
		}
		
		for (int i = 0; i < n2; i++) {
			rightarr[i] = arr[mid + 1 + i];
		}
		
		int i = 0, j = 0;	// 왼쪽 배열 인덱스, 오른쪽 배열 인덱스
		int k = left;	// 원본 배열 arr의 시작 인덱스
		
		// 원본 배열에 정렬
		while (i < n1 && j < n2) {
			if (leftarr[i] <= rightarr[j]) {
				arr[k] = leftarr[i++];
			}
			else {
				arr[k] = rightarr[j++];
			}
			k++;
		}
		
		// 왼쪽 배열에 남은 원소 복사
		while (i < n1) {
			arr[k++] = leftarr[i++];
		}
		
		// 오른쪽 배열에 남은 원소 복사
		while (j < n2) {
			arr[k++] = rightarr[j++];
		}
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt();
		int[] arr = new int[N];
		
		for (int i = 0; i < N; i++) {
			arr[i] = sc.nextInt();
		}
		
		/* 인스터스 메소드로 사용할 경우
		 * 
		 * num_2751 sort = new num_2751();
		 * sort.mergesort(arr, 0, arr.length - 1);
		 */
		
		// 병합 정렬 실행
		mergesort(arr, 0, arr.length - 1);
		
		// 배열 출력
		for (int i : arr) {
			System.out.println(i);
		}
	}
}
